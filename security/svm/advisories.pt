name "SVM detect advisories"
rs_pt_ver 20180301
type "policy"
short_description "A policy which polls SVM and matches advisories vs. instances."
long_description "Version: 0.1"
severity "medium"
category "Security"

permission "general_permissions" do
  resources "rs_cm.clouds", "rs_cm.security_groups", "rs_cm.security_group_rules"
  actions   "rs_cm.index","rs_cm.show"
end

parameter "param_email" do
  type "list"
  label "Email addresses of the recipients you wish to notify"
end

auth "svm", type: "api_key" do
  key cred("SVM_API_KEY")
  location "header"
  field "Authorization"
  type "Token"
end

auth "rs", type: "rightscale"

resources "clouds", type: "rs_cm.clouds"

resources "instances", type: "rs_cm.instances" do
  iterate @clouds
  cloud_href href(iter_item)
  tags "svm:hostname=*"
end

# include fields in your datasource
datasource "instances" do
  iterate @instances
  field "href",        href(iter_item)
  field "id",          val(iter_item, "resource_uid")
  field "name",        val(iter_item, "name")
  field "state",       val(iter_item, "state")
  field "tags",        val(iter_item, "tags")
  field "cloud_href",  jmes_path(iter_item, "links[?rel=='cloud'].href | [0]")
end

datasource "svm_hosts" do
  request do
    auth $svm
    verb "GET"
    host "api.app.flexerasoftware.com"
    path "/api/inventory/hosts"
    query "is_insecure", "1"
  end
  result do
    encoding "json"
    collect jmes_path(response, "results") do
      field "id",  val(col_item, "id")
      field "host_id",  val(col_item, "host_id")
      field "name", val(col_item, "name")
      field "unique_id", val(col_item, "unique_id")
      field "inventory_system", val(col_item, "inventory_system")
      field "insecure_installations", jmes_path(col_item, "stat.insecure_installations")
      field "eol_installations", jmes_path(col_item, "stat.eol_installations")
    end
  end
end

datasource "crossref_instances" do
  run_script $crossref_advisories, $instances, $svm_hosts, rs_project_id, rs_cm_host
end

script "crossref_advisories", type: "javascript" do
  parameters "instances", "svm_hosts", "rs_project_id", "rs_cm_host"
  result "advisories"
code <<-EOS
var advisory_by_host = {};
for (var i = 0; i < svm_hosts.length; i++) {
  host = svm_hosts[i];
  advisory_by_host[host.name] = host;
}

var advisories = [];
for (var i = 0; i < instances.length; i++) {
  instance = instances[i]
  for (var j = 0; j < instance.tags.length; j++) {
    matches = instance.tags[j].match(/svm:hostname=(.*)/)
    if (matches) {
      host = matches[1]
      if (advisory_by_host[host]) {
        el = advisory_by_host[host]
        el.tags = instance.tags
        el.instance_id = instance.id
        el.instance_name = instance.name
        el.hostname = host
        el.cloud_href = instance.cloud_href
        advisories.push(el)
      }
    }
  }
}
EOS
end

escalation "send_email" do
  email $param_email
end

policy "detect_advisories" do
  validate_each $crossref_instances do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{ len data }} Instances with advisories"
    detail_template <<-EOS
# Instances with advisories software

| Instance ID | Instance Name | Host ID | EOL Installations | Insecure Installations
| ----------- | ------------- | --- | --- |   
{{ range data -}}
| {{ .instance_id }} | {{ .instance_name }} | {{ .host_id }} | {{ .eol_installations }} | {{ .insecure_installations }} |
{{ end -}}
EOS

    escalate $send_email
    check logic_and( lt(val(item, "eol_installations"), 1), lt(val(item, "insecure_installations"), 1) )
  end
end