name "Schedule instances"
rs_pt_ver 20180301
type "policy"
short_description "A policy that start and stops instances based on a schedule"
long_description "Version 1.0"
severity "medium"
category "Cost"


# parameter "param_schedule" do
#   type "string"
#   label "Schedule Ex: 07-19:M.T.W.Th.F start_hour-end_hour:days_of_week_to_run "
#   default "instance:schedule=Business Hours"
# end

parameter 'timezone_override' do
  label 'Timezone Override'
  description "By default, the user's timezone is used."
  type 'string'
  allowed_values  '',
                  'Africa/Abidjan',
                  'Africa/Accra',
                  'Africa/Addis_Ababa',
                  'Africa/Algiers',
                  'Africa/Asmara',
                  'Africa/Asmera',
                  'Africa/Bamako',
                  'Africa/Bangui',
                  'Africa/Banjul',
                  'Africa/Bissau',
                  'Africa/Blantyre',
                  'Africa/Brazzaville',
                  'Africa/Bujumbura',
                  'Africa/Cairo',
                  'Africa/Casablanca',
                  'Africa/Ceuta',
                  'Africa/Conakry',
                  'Africa/Dakar',
                  'Africa/Dar_es_Salaam',
                  'Africa/Djibouti',
                  'Africa/Douala',
                  'Africa/El_Aaiun',
                  'Africa/Freetown',
                  'Africa/Gaborone',
                  'Africa/Harare',
                  'Africa/Johannesburg',
                  'Africa/Juba',
                  'Africa/Kampala',
                  'Africa/Khartoum',
                  'Africa/Kigali',
                  'Africa/Kinshasa',
                  'Africa/Lagos',
                  'Africa/Libreville',
                  'Africa/Lome',
                  'Africa/Luanda',
                  'Africa/Lubumbashi',
                  'Africa/Lusaka',
                  'Africa/Malabo',
                  'Africa/Maputo',
                  'Africa/Maseru',
                  'Africa/Mbabane',
                  'Africa/Mogadishu',
                  'Africa/Monrovia',
                  'Africa/Nairobi',
                  'Africa/Ndjamena',
                  'Africa/Niamey',
                  'Africa/Nouakchott',
                  'Africa/Ouagadougou',
                  'Africa/Porto-Novo',
                  'Africa/Sao_Tome',
                  'Africa/Timbuktu',
                  'Africa/Tripoli',
                  'Africa/Tunis',
                  'Africa/Windhoek',
                  'America/Adak',
                  'America/Anchorage',
                  'America/Anguilla',
                  'America/Antigua',
                  'America/Araguaina',
                  'America/Argentina/Buenos_Aires',
                  'America/Argentina/Catamarca',
                  'America/Argentina/ComodRivadavia',
                  'America/Argentina/Cordoba',
                  'America/Argentina/Jujuy',
                  'America/Argentina/La_Rioja',
                  'America/Argentina/Mendoza',
                  'America/Argentina/Rio_Gallegos',
                  'America/Argentina/Salta',
                  'America/Argentina/San_Juan',
                  'America/Argentina/San_Luis',
                  'America/Argentina/Tucuman',
                  'America/Argentina/Ushuaia',
                  'America/Aruba',
                  'America/Asuncion',
                  'America/Atikokan',
                  'America/Atka',
                  'America/Bahia',
                  'America/Bahia_Banderas',
                  'America/Barbados',
                  'America/Belem',
                  'America/Belize',
                  'America/Blanc-Sablon',
                  'America/Boa_Vista',
                  'America/Bogota',
                  'America/Boise',
                  'America/Buenos_Aires',
                  'America/Cambridge_Bay',
                  'America/Campo_Grande',
                  'America/Cancun',
                  'America/Caracas',
                  'America/Catamarca',
                  'America/Cayenne',
                  'America/Cayman',
                  'America/Chicago',
                  'America/Chihuahua',
                  'America/Coral_Harbour',
                  'America/Cordoba',
                  'America/Costa_Rica',
                  'America/Creston',
                  'America/Cuiaba',
                  'America/Curacao',
                  'America/Danmarkshavn',
                  'America/Dawson',
                  'America/Dawson_Creek',
                  'America/Denver',
                  'America/Detroit',
                  'America/Dominica',
                  'America/Edmonton',
                  'America/Eirunepe',
                  'America/El_Salvador',
                  'America/Ensenada',
                  'America/Fort_Nelson',
                  'America/Fort_Wayne',
                  'America/Fortaleza',
                  'America/Glace_Bay',
                  'America/Godthab',
                  'America/Goose_Bay',
                  'America/Grand_Turk',
                  'America/Grenada',
                  'America/Guadeloupe',
                  'America/Guatemala',
                  'America/Guayaquil',
                  'America/Guyana',
                  'America/Halifax',
                  'America/Havana',
                  'America/Hermosillo',
                  'America/Indiana/Indianapolis',
                  'America/Indiana/Knox',
                  'America/Indiana/Marengo',
                  'America/Indiana/Petersburg',
                  'America/Indiana/Tell_City',
                  'America/Indiana/Vevay',
                  'America/Indiana/Vincennes',
                  'America/Indiana/Winamac',
                  'America/Indianapolis',
                  'America/Inuvik',
                  'America/Iqaluit',
                  'America/Jamaica',
                  'America/Jujuy',
                  'America/Juneau',
                  'America/Kentucky/Louisville',
                  'America/Kentucky/Monticello',
                  'America/Knox_IN',
                  'America/Kralendijk',
                  'America/La_Paz',
                  'America/Lima',
                  'America/Los_Angeles',
                  'America/Louisville',
                  'America/Lower_Princes',
                  'America/Maceio',
                  'America/Managua',
                  'America/Manaus',
                  'America/Marigot',
                  'America/Martinique',
                  'America/Matamoros',
                  'America/Mazatlan',
                  'America/Mendoza',
                  'America/Menominee',
                  'America/Merida',
                  'America/Metlakatla',
                  'America/Mexico_City',
                  'America/Miquelon',
                  'America/Moncton',
                  'America/Monterrey',
                  'America/Montevideo',
                  'America/Montreal',
                  'America/Montserrat',
                  'America/Nassau',
                  'America/New_York',
                  'America/Nipigon',
                  'America/Nome',
                  'America/Noronha',
                  'America/North_Dakota/Beulah',
                  'America/North_Dakota/Center',
                  'America/North_Dakota/New_Salem',
                  'America/Ojinaga',
                  'America/Panama',
                  'America/Pangnirtung',
                  'America/Paramaribo',
                  'America/Phoenix',
                  'America/Port_of_Spain',
                  'America/Port-au-Prince',
                  'America/Porto_Acre',
                  'America/Porto_Velho',
                  'America/Puerto_Rico',
                  'America/Rainy_River',
                  'America/Rankin_Inlet',
                  'America/Recife',
                  'America/Regina',
                  'America/Resolute',
                  'America/Rio_Branco',
                  'America/Rosario',
                  'America/Santa_Isabel',
                  'America/Santarem',
                  'America/Santiago',
                  'America/Santo_Domingo',
                  'America/Sao_Paulo',
                  'America/Scoresbysund',
                  'America/Shiprock',
                  'America/Sitka',
                  'America/St_Barthelemy',
                  'America/St_Johns',
                  'America/St_Kitts',
                  'America/St_Lucia',
                  'America/St_Thomas',
                  'America/St_Vincent',
                  'America/Swift_Current',
                  'America/Tegucigalpa',
                  'America/Thule',
                  'America/Thunder_Bay',
                  'America/Tijuana',
                  'America/Toronto',
                  'America/Tortola',
                  'America/Vancouver',
                  'America/Virgin',
                  'America/Whitehorse',
                  'America/Winnipeg',
                  'America/Yakutat',
                  'America/Yellowknife',
                  'Antarctica/Casey',
                  'Antarctica/Davis',
                  'Antarctica/DumontDUrville',
                  'Antarctica/Macquarie',
                  'Antarctica/Mawson',
                  'Antarctica/McMurdo',
                  'Antarctica/Palmer',
                  'Antarctica/Rothera',
                  'Antarctica/South_Pole',
                  'Antarctica/Syowa',
                  'Antarctica/Troll',
                  'Antarctica/Vostok',
                  'Arctic/Longyearbyen',
                  'Asia/Aden',
                  'Asia/Almaty',
                  'Asia/Amman',
                  'Asia/Anadyr',
                  'Asia/Aqtau',
                  'Asia/Aqtobe',
                  'Asia/Ashgabat',
                  'Asia/Ashkhabad',
                  'Asia/Atyrau',
                  'Asia/Baghdad',
                  'Asia/Bahrain',
                  'Asia/Baku',
                  'Asia/Bangkok',
                  'Asia/Barnaul',
                  'Asia/Beirut',
                  'Asia/Bishkek',
                  'Asia/Brunei',
                  'Asia/Calcutta',
                  'Asia/Chita',
                  'Asia/Choibalsan',
                  'Asia/Chongqing',
                  'Asia/Chungking',
                  'Asia/Colombo',
                  'Asia/Dacca',
                  'Asia/Damascus',
                  'Asia/Dhaka',
                  'Asia/Dili',
                  'Asia/Dubai',
                  'Asia/Dushanbe',
                  'Asia/Famagusta',
                  'Asia/Gaza',
                  'Asia/Harbin',
                  'Asia/Hebron',
                  'Asia/Ho_Chi_Minh',
                  'Asia/Hong_Kong',
                  'Asia/Hovd',
                  'Asia/Irkutsk',
                  'Asia/Istanbul',
                  'Asia/Jakarta',
                  'Asia/Jayapura',
                  'Asia/Jerusalem',
                  'Asia/Kabul',
                  'Asia/Kamchatka',
                  'Asia/Karachi',
                  'Asia/Kashgar',
                  'Asia/Kathmandu',
                  'Asia/Katmandu',
                  'Asia/Khandyga',
                  'Asia/Kolkata',
                  'Asia/Krasnoyarsk',
                  'Asia/Kuala_Lumpur',
                  'Asia/Kuching',
                  'Asia/Kuwait',
                  'Asia/Macao',
                  'Asia/Macau',
                  'Asia/Magadan',
                  'Asia/Makassar',
                  'Asia/Manila',
                  'Asia/Muscat',
                  'Asia/Nicosia',
                  'Asia/Novokuznetsk',
                  'Asia/Novosibirsk',
                  'Asia/Omsk',
                  'Asia/Oral',
                  'Asia/Phnom_Penh',
                  'Asia/Pontianak',
                  'Asia/Pyongyang',
                  'Asia/Qatar',
                  'Asia/Qyzylorda',
                  'Asia/Rangoon',
                  'Asia/Riyadh',
                  'Asia/Saigon',
                  'Asia/Sakhalin',
                  'Asia/Samarkand',
                  'Asia/Seoul',
                  'Asia/Shanghai',
                  'Asia/Singapore',
                  'Asia/Srednekolymsk',
                  'Asia/Taipei',
                  'Asia/Tashkent',
                  'Asia/Tbilisi',
                  'Asia/Tehran',
                  'Asia/Tel_Aviv',
                  'Asia/Thimbu',
                  'Asia/Thimphu',
                  'Asia/Tokyo',
                  'Asia/Tomsk',
                  'Asia/Ujung_Pandang',
                  'Asia/Ulaanbaatar',
                  'Asia/Ulan_Bator',
                  'Asia/Urumqi',
                  'Asia/Ust-Nera',
                  'Asia/Vientiane',
                  'Asia/Vladivostok',
                  'Asia/Yakutsk',
                  'Asia/Yangon',
                  'Asia/Yekaterinburg',
                  'Asia/Yerevan',
                  'Atlantic/Azores',
                  'Atlantic/Bermuda',
                  'Atlantic/Canary',
                  'Atlantic/Cape_Verde',
                  'Atlantic/Faeroe',
                  'Atlantic/Faroe',
                  'Atlantic/Jan_Mayen',
                  'Atlantic/Madeira',
                  'Atlantic/Reykjavik',
                  'Atlantic/South_Georgia',
                  'Atlantic/St_Helena',
                  'Atlantic/Stanley',
                  'Australia/ACT',
                  'Australia/Adelaide',
                  'Australia/Brisbane',
                  'Australia/Broken_Hill',
                  'Australia/Canberra',
                  'Australia/Currie',
                  'Australia/Darwin',
                  'Australia/Eucla',
                  'Australia/Hobart',
                  'Australia/LHI',
                  'Australia/Lindeman',
                  'Australia/Lord_Howe',
                  'Australia/Melbourne',
                  'Australia/North',
                  'Australia/NSW',
                  'Australia/Perth',
                  'Australia/Queensland',
                  'Australia/South',
                  'Australia/Sydney',
                  'Australia/Tasmania',
                  'Australia/Victoria',
                  'Australia/West',
                  'Australia/Yancowinna',
                  'Brazil/Acre',
                  'Brazil/DeNoronha',
                  'Brazil/East',
                  'Brazil/West',
                  'Canada/Atlantic',
                  'Canada/Central',
                  'Canada/Eastern',
                  'Canada/East-Saskatchewan',
                  'Canada/Mountain',
                  'Canada/Newfoundland',
                  'Canada/Pacific',
                  'Canada/Saskatchewan',
                  'Canada/Yukon',
                  'CET',
                  'Chile/Continental',
                  'Chile/EasterIsland',
                  'CST6CDT',
                  'Cuba',
                  'EET',
                  'Egypt',
                  'Eire',
                  'EST',
                  'EST5EDT',
                  'Etc/GMT',
                  'Etc/GMT+0',
                  'Etc/GMT+1',
                  'Etc/GMT+10',
                  'Etc/GMT+11',
                  'Etc/GMT+12',
                  'Etc/GMT+2',
                  'Etc/GMT+3',
                  'Etc/GMT+4',
                  'Etc/GMT+5',
                  'Etc/GMT+6',
                  'Etc/GMT+7',
                  'Etc/GMT+8',
                  'Etc/GMT+9',
                  'Etc/GMT0',
                  'Etc/GMT-0',
                  'Etc/GMT-1',
                  'Etc/GMT-10',
                  'Etc/GMT-11',
                  'Etc/GMT-12',
                  'Etc/GMT-13',
                  'Etc/GMT-14',
                  'Etc/GMT-2',
                  'Etc/GMT-3',
                  'Etc/GMT-4',
                  'Etc/GMT-5',
                  'Etc/GMT-6',
                  'Etc/GMT-7',
                  'Etc/GMT-8',
                  'Etc/GMT-9',
                  'Etc/Greenwich',
                  'Etc/UCT',
                  'Etc/Universal',
                  'Etc/UTC',
                  'Etc/Zulu',
                  'Europe/Amsterdam',
                  'Europe/Andorra',
                  'Europe/Astrakhan',
                  'Europe/Athens',
                  'Europe/Belfast',
                  'Europe/Belgrade',
                  'Europe/Berlin',
                  'Europe/Bratislava',
                  'Europe/Brussels',
                  'Europe/Bucharest',
                  'Europe/Budapest',
                  'Europe/Busingen',
                  'Europe/Chisinau',
                  'Europe/Copenhagen',
                  'Europe/Dublin',
                  'Europe/Gibraltar',
                  'Europe/Guernsey',
                  'Europe/Helsinki',
                  'Europe/Isle_of_Man',
                  'Europe/Istanbul',
                  'Europe/Jersey',
                  'Europe/Kaliningrad',
                  'Europe/Kiev',
                  'Europe/Kirov',
                  'Europe/Lisbon',
                  'Europe/Ljubljana',
                  'Europe/London',
                  'Europe/Luxembourg',
                  'Europe/Madrid',
                  'Europe/Malta',
                  'Europe/Mariehamn',
                  'Europe/Minsk',
                  'Europe/Monaco',
                  'Europe/Moscow',
                  'Europe/Nicosia',
                  'Europe/Oslo',
                  'Europe/Paris',
                  'Europe/Podgorica',
                  'Europe/Prague',
                  'Europe/Riga',
                  'Europe/Rome',
                  'Europe/Samara',
                  'Europe/San_Marino',
                  'Europe/Sarajevo',
                  'Europe/Saratov',
                  'Europe/Simferopol',
                  'Europe/Skopje',
                  'Europe/Sofia',
                  'Europe/Stockholm',
                  'Europe/Tallinn',
                  'Europe/Tirane',
                  'Europe/Tiraspol',
                  'Europe/Ulyanovsk',
                  'Europe/Uzhgorod',
                  'Europe/Vaduz',
                  'Europe/Vatican',
                  'Europe/Vienna',
                  'Europe/Vilnius',
                  'Europe/Volgograd',
                  'Europe/Warsaw',
                  'Europe/Zagreb',
                  'Europe/Zaporozhye',
                  'Europe/Zurich',
                  'GB',
                  'GB-Eire',
                  'GMT',
                  'GMT+0',
                  'GMT0',
                  'GMT-0',
                  'Greenwich',
                  'Hongkong',
                  'HST',
                  'Iceland',
                  'Indian/Antananarivo',
                  'Indian/Chagos',
                  'Indian/Christmas',
                  'Indian/Cocos',
                  'Indian/Comoro',
                  'Indian/Kerguelen',
                  'Indian/Mahe',
                  'Indian/Maldives',
                  'Indian/Mauritius',
                  'Indian/Mayotte',
                  'Indian/Reunion',
                  'Iran',
                  'Israel',
                  'Jamaica',
                  'Japan',
                  'Kwajalein',
                  'Libya',
                  'MET',
                  'Mexico/BajaNorte',
                  'Mexico/BajaSur',
                  'Mexico/General',
                  'MST',
                  'MST7MDT',
                  'Navajo',
                  'NZ',
                  'NZ-CHAT',
                  'Pacific/Apia',
                  'Pacific/Auckland',
                  'Pacific/Bougainville',
                  'Pacific/Chatham',
                  'Pacific/Chuuk',
                  'Pacific/Easter',
                  'Pacific/Efate',
                  'Pacific/Enderbury',
                  'Pacific/Fakaofo',
                  'Pacific/Fiji',
                  'Pacific/Funafuti',
                  'Pacific/Galapagos',
                  'Pacific/Gambier',
                  'Pacific/Guadalcanal',
                  'Pacific/Guam',
                  'Pacific/Honolulu',
                  'Pacific/Johnston',
                  'Pacific/Kiritimati',
                  'Pacific/Kosrae',
                  'Pacific/Kwajalein',
                  'Pacific/Majuro',
                  'Pacific/Marquesas',
                  'Pacific/Midway',
                  'Pacific/Nauru',
                  'Pacific/Niue',
                  'Pacific/Norfolk',
                  'Pacific/Noumea',
                  'Pacific/Pago_Pago',
                  'Pacific/Palau',
                  'Pacific/Pitcairn',
                  'Pacific/Pohnpei',
                  'Pacific/Ponape',
                  'Pacific/Port_Moresby',
                  'Pacific/Rarotonga',
                  'Pacific/Saipan',
                  'Pacific/Samoa',
                  'Pacific/Tahiti',
                  'Pacific/Tarawa',
                  'Pacific/Tongatapu',
                  'Pacific/Truk',
                  'Pacific/Wake',
                  'Pacific/Wallis',
                  'Pacific/Yap',
                  'Poland',
                  'Portugal',
                  'PRC',
                  'PST8PDT',
                  'ROC',
                  'ROK',
                  'Singapore',
                  'Turkey',
                  'UCT',
                  'Universal',
                  'US/Alaska',
                  'US/Aleutian',
                  'US/Arizona',
                  'US/Central',
                  'US/Eastern',
                  'US/East-Indiana',
                  'US/Hawaii',
                  'US/Indiana-Starke',
                  'US/Michigan',
                  'US/Mountain',
                  'US/Pacific',
                  'US/Pacific-New',
                  'US/Samoa',
                  'UTC',
                  'WET',
                  'W-SU',
                  'Zulu'
end

parameter "escalate_to" do
  type "list"
  label "Email addresses"
end

permission "retrieve_resources" do
  label "Retrieve Resources"
  actions   "rs_cm.index","rs_cm.show"
  resources "rs_cm.instances","rs_cm.clouds"
end

permission "retrieve_tags" do
  label "Retrieve Tags"
  actions "rs_cm.by_tag"
  resources "rs_cm.tags"
end

auth "rs", type: "rightscale"

#all clouds
resources "clouds", type: "rs_cm.clouds"

#all instances operational or provisioned
resources "instances", type: "rs_cm.instances" do
  iterate @clouds
  cloud_href href(iter_item)
end
# resources "instances_provisioned", type: "rs_cm.instances" do
#   iterate @clouds
#   cloud_href href(iter_item)
# end

# datasource "instances_provisioned" do
#   iterate @instances_provisioned
#   field "href",        href(iter_item)
#   field "id",          val(iter_item,'resource_uid')
#   field "name",        val(iter_item,'name')
#   field "state",       val(iter_item,'state')
#   field "type",        "instances"
# end

datasource "instances" do
  iterate @instances
  field "href",        href(iter_item)
  field "id",          val(iter_item,'resource_uid')
  field "name",        val(iter_item,'name')
  field "state",       val(iter_item,'state')
  field "type",        "instances"
  tags                 "instance:schedule=*"
end

# datasource "instances" do
#   run_script $merge_instances, $instances_operational,
# end
#
# script "merge_instances", type: "javascript" do
#   parameters "instances_operational",
#   result "instances"
#   code <<-EOS
#     var instances = []
#     for (i = 0; i < instances_operational.length; i++) {
#       instances.push(instances_operational[i])
#     }
#     for (i = 0; i < instances_provisioned.length; i++) {
#       instances.push(instances_provisioned[i])
#     }
#   EOS
# end

#all tags on the instances
# datasource "ds_instance_tags" do
#   request do
#     auth $rs
#     verb "POST"
#     host rs_cm_host
#     path "/api/tags/by_tag"
#     header "X-Api-Version", "1.5"
#     body_field "tags",["instance:schedule=*"]
#     body_field "resource_type", "instances"
#     body_field "include_tags_with_prefix", "instance:schedule"
#   end
# end

datasource "clouds" do
  iterate @clouds
  field "href",         href(iter_item)
  field "type",         val(iter_item,'cloud_type')
  field "name",         val(iter_item,'name')
end

datasource "filtered_instances" do
  run_script $js_instance_tags, $instances, $clouds
end

script "js_instance_tags", type: "javascript" do
  parameters "instances","instance_tags","clouds"
  result "filtered_instances"
  code <<-EOS
  // This is the list of filtered volumes.
  var filtered_instances = [];


  // create a map of clouds with href key to get type and name
  var cloud_map = {}
  for (var i = 0; i < clouds.length; i++) {
      var cloud = clouds[i]
      cloud_map[cloud['href']]={'type': cloud['type'],'name': cloud['name']}
  }

  var instance_map = {}
  for (var i = 0; i < instances.length; i++) {
      var instance = instances[i]
      instance_map[instance['href']]={
        'state': instance['state'],
        'name': instance['name'],
        'id': instance['id'],
        'tags': instance['tags']
      }
  }

  # // create a map of tags with instance href
  # var tags = {};
  # for (var i = 0; i < instance_tags.length; i++) {
  #   rt = instance_tags[i]
  #   for (var j = 0; j < rt['links'].length; j++) {
  #     link = rt['links'][j]
  #     if (link['rel'] == 'resource') {
  #       tags[link['href']] = rt['tags']
  #     }
  #   }
  # }

  // This is the map of resource href to its tags.
  for (var i = 0; i < instances.length; i++) {
    var instance = instances[i]
    for (var t = 0; t < instance['tags'].length; t++) {
      tag = instance['tags'][t]
      tag_key = tag.split("=")[0]
      tag_value = tag.split("=")[1]
      schedule = tag_value
    }
        // create object of instances
        filtered_instances.push(
          {
            id: instance_map[link['href']]['id'],
            name: instance_map[link['href']]['name'],
            state: instance_map[link['href']]['state'],
            href: link['href'],
            cloud_name: cloud_map[cloud_href]['name'],
            cloud_type: cloud_map[cloud_href]['type'],
            schedule: schedule
          }
          )
      }
    }
  }
  EOS
end

# only send email, if email is not provided this escalation is skipped
escalation "send_email" do
  email $escalate_to
end

# run the stop/start action on instances.
escalation "stop_start_instances" do
  run "schedule_instances", data, $timezone_override
end

policy "instance_scheduler" do
  validate $filtered_instances do
    summary_template "Schedule Instance Policy"
    detail_template <<-EOS
There are {{ len data }} instance(s)

| Name | State | Cloud | Href | schedule |
| ---- | ----- | ----- | ---- | -------- |
{{ range data -}}
| {{ .name }} | {{ .state }} | {{ .cloud_name }} | {{ .href }} | {{ .schedule }}
{{ end -}}
EOS
    escalate $send_email
    escalate $stop_start_instances
    check eq(size(data), 0)
  end
end

define schedule_instances($data,$timezone_override) do
  $$debug = true
  call sys_log('schedule_instances','start')
  # use selected timezone or UTC as default
  if size($timezone_override) > 0
    $timezone = $timezone_override
  else
    $timezone = 'UTC'
  end

  # set the counters and action stores
  $stop_count = 0
  $start_count = 0
  $locked_count = 0
  $$unstoppable_count = 0
  $instances_started = []
  $instances_stopped = []
  foreach $item in $data do
    call sys_log('item', to_s($item))

    $rule = split($item['schedule'],';')[1]
    $time_range = split($item['schedule'],';')[0]
    $start_hour = split($time_range,'-')[0]
    $stop_hour = split($time_range,'-')[1]
    $start_rule = join(["FREQ=WEEKLY;BYDAY=",$rule])
    $start_minute = '00'
    $stop_rule = join(["FREQ=WEEKLY;BYDAY=",$rule])
    $stop_minute = '00'

    # get state of schedule window
    call window_active($start_hour, $start_minute, $start_rule, $stop_hour, $stop_minute, $stop_rule, $timezone) retrieve $window_active

    if ($window_active)
      call sys_log($item['schedule'] + ' schedule window is currently active: Instances may be started.', '')
    else
      call sys_log($item['schedule'] + ' schedule window is currently in-active: Instances may be stopped.', '')
    end

    $stoppable = /^(running|operational|stranded)$/
    $startable = /^(stopped|provisioned)$/

    @instance = rs_cm.get(href: $item['href'])
    call sys_log('Fetching instance ' + $item['href'], to_s($item))
    # determine if instance should be stopped or started based on:
    # 1. inside or outside schedule
    # 2. current operational state
    if (! $window_active)

      if ($item['state'] =~ $stoppable)
      # stop the instance
          call sys_log('> ' + $item['name'] + ': Stopping ...', to_s($item))
          sub on_error: error_server_stop() do
            if @instance.locked == false
              @instance.stop()
            else
              $locked_count = $locked_count + 1
            end
          end
          $stop_count = $stop_count + 1
          $instances_stopped << { href: $item['href'], name: $item['name'] }
      else
        call sys_log('> ' + $item['name'] + ': No action - Instance state is ' + $item['state'], '')
      end
    else
      if ($item['state'] =~ $startable)
      # start the instance
        call sys_log('> ' + $item['name'] + ': Starting ...', to_s($item))
        @instance.start()
        $start_count = $start_count + 1
        $instances_started << { href: $item['href'], name: $item['name'] }
      else
        call sys_log('> ' + $item['name'] + ': No action - Instance state is ' + $item['state'], '')
      end
    end  #if (! $window_active)
  end
end

define window_active($start_hour, $start_minute, $start_rule, $stop_hour, $stop_minute, $stop_rule, $tz) return $window_active do
  $params = {
    verb: 'post',
    host: 'bjlaftw4kh.execute-api.us-east-1.amazonaws.com',
    https: true,
    href: '/production',
    headers:{
      'content-type': 'application/json'
    },
    body: {
      'start_hour': $start_hour,
      'start_minute': $start_minute,
      'start_rule': $start_rule,
      'stop_minute': $stop_minute,
      'stop_hour': $stop_hour,
      'stop_rule': $stop_rule,
      'tz': $tz
    }
  }
  call sys_log('window active $params', to_s($params))
  $response = http_request($params)
  call sys_log('window active $response', to_s($response))
  $body = $response['body']
  call sys_log('window active $body', to_s($body))

  $window_active = to_b($body['event_active'])
end

define sys_log($subject, $detail) do
  if $$debug
    rs_cm.audit_entries.create(
      notify: "None",
      audit_entry: {
        auditee_href: @@account,
        summary: $subject,
        detail: $detail
      }
    )
  end
end

define error_server_stop() do
  $_error_behavior = "skip"
  foreach $e in $_errors do
    if $e["error_details"]["summary"] !~ /The instance is not stoppable/
      $_error_behavior = "raise"
    else
      $$unstoppable_count = $$unstoppable_count + 1
    end
  end
end
